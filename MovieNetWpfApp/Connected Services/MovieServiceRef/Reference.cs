//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MovieNetWpfApp.MovieServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Movie", Namespace="http://schemas.datacontract.org/2004/07/MovieNetWcfService")]
    [System.SerializableAttribute()]
    public partial class Movie : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DurationGetSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenreGetSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdGetSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageGetSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoteSet_idGetSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummaryGetSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleGetSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserSet_idGetSetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DurationGetSet {
            get {
                return this.DurationGetSetField;
            }
            set {
                if ((object.ReferenceEquals(this.DurationGetSetField, value) != true)) {
                    this.DurationGetSetField = value;
                    this.RaisePropertyChanged("DurationGetSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GenreGetSet {
            get {
                return this.GenreGetSetField;
            }
            set {
                if ((object.ReferenceEquals(this.GenreGetSetField, value) != true)) {
                    this.GenreGetSetField = value;
                    this.RaisePropertyChanged("GenreGetSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdGetSet {
            get {
                return this.IdGetSetField;
            }
            set {
                if ((this.IdGetSetField.Equals(value) != true)) {
                    this.IdGetSetField = value;
                    this.RaisePropertyChanged("IdGetSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageGetSet {
            get {
                return this.ImageGetSetField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageGetSetField, value) != true)) {
                    this.ImageGetSetField = value;
                    this.RaisePropertyChanged("ImageGetSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoteSet_idGetSet {
            get {
                return this.NoteSet_idGetSetField;
            }
            set {
                if ((this.NoteSet_idGetSetField.Equals(value) != true)) {
                    this.NoteSet_idGetSetField = value;
                    this.RaisePropertyChanged("NoteSet_idGetSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SummaryGetSet {
            get {
                return this.SummaryGetSetField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryGetSetField, value) != true)) {
                    this.SummaryGetSetField = value;
                    this.RaisePropertyChanged("SummaryGetSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TitleGetSet {
            get {
                return this.TitleGetSetField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleGetSetField, value) != true)) {
                    this.TitleGetSetField = value;
                    this.RaisePropertyChanged("TitleGetSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserSet_idGetSet {
            get {
                return this.UserSet_idGetSetField;
            }
            set {
                if ((this.UserSet_idGetSetField.Equals(value) != true)) {
                    this.UserSet_idGetSetField = value;
                    this.RaisePropertyChanged("UserSet_idGetSet");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MovieServiceRef.IMovieServiceWCF")]
    public interface IMovieServiceWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/GetAllMovies", ReplyAction="http://tempuri.org/IMovieServiceWCF/GetAllMoviesResponse")]
        MovieNetWpfApp.MovieServiceRef.Movie[] GetAllMovies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/GetAllMovies", ReplyAction="http://tempuri.org/IMovieServiceWCF/GetAllMoviesResponse")]
        System.Threading.Tasks.Task<MovieNetWpfApp.MovieServiceRef.Movie[]> GetAllMoviesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/GetMovie", ReplyAction="http://tempuri.org/IMovieServiceWCF/GetMovieResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MovieNetWpfApp.MovieServiceRef.Movie[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MovieNetWpfApp.MovieServiceRef.Movie))]
        object GetMovie(int idSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/GetMovie", ReplyAction="http://tempuri.org/IMovieServiceWCF/GetMovieResponse")]
        System.Threading.Tasks.Task<object> GetMovieAsync(int idSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/CreateMovie", ReplyAction="http://tempuri.org/IMovieServiceWCF/CreateMovieResponse")]
        bool CreateMovie(string _title, string _duration, string _genre, string _summary, string image, int _UserSet_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/CreateMovie", ReplyAction="http://tempuri.org/IMovieServiceWCF/CreateMovieResponse")]
        System.Threading.Tasks.Task<bool> CreateMovieAsync(string _title, string _duration, string _genre, string _summary, string image, int _UserSet_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/DeleteMovie", ReplyAction="http://tempuri.org/IMovieServiceWCF/DeleteMovieResponse")]
        bool DeleteMovie(int idSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/DeleteMovie", ReplyAction="http://tempuri.org/IMovieServiceWCF/DeleteMovieResponse")]
        System.Threading.Tasks.Task<bool> DeleteMovieAsync(int idSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/UpdateUser", ReplyAction="http://tempuri.org/IMovieServiceWCF/UpdateUserResponse")]
        bool UpdateUser(int _Id, string _title, string _duration, string _genre, string _summary, string _image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/UpdateUser", ReplyAction="http://tempuri.org/IMovieServiceWCF/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(int _Id, string _title, string _duration, string _genre, string _summary, string _image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/FindMovieByTitle", ReplyAction="http://tempuri.org/IMovieServiceWCF/FindMovieByTitleResponse")]
        MovieNetWpfApp.MovieServiceRef.Movie[] FindMovieByTitle(string titleSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/FindMovieByTitle", ReplyAction="http://tempuri.org/IMovieServiceWCF/FindMovieByTitleResponse")]
        System.Threading.Tasks.Task<MovieNetWpfApp.MovieServiceRef.Movie[]> FindMovieByTitleAsync(string titleSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/FindMovieByGenre", ReplyAction="http://tempuri.org/IMovieServiceWCF/FindMovieByGenreResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MovieNetWpfApp.MovieServiceRef.Movie[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MovieNetWpfApp.MovieServiceRef.Movie))]
        object FindMovieByGenre(string genreSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/FindMovieByGenre", ReplyAction="http://tempuri.org/IMovieServiceWCF/FindMovieByGenreResponse")]
        System.Threading.Tasks.Task<object> FindMovieByGenreAsync(string genreSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/FindMoviesOfUser", ReplyAction="http://tempuri.org/IMovieServiceWCF/FindMoviesOfUserResponse")]
        MovieNetWpfApp.MovieServiceRef.Movie[] FindMoviesOfUser(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/FindMoviesOfUser", ReplyAction="http://tempuri.org/IMovieServiceWCF/FindMoviesOfUserResponse")]
        System.Threading.Tasks.Task<MovieNetWpfApp.MovieServiceRef.Movie[]> FindMoviesOfUserAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/GetAllMoviesById", ReplyAction="http://tempuri.org/IMovieServiceWCF/GetAllMoviesByIdResponse")]
        MovieNetWpfApp.MovieServiceRef.Movie[] GetAllMoviesById(int idSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServiceWCF/GetAllMoviesById", ReplyAction="http://tempuri.org/IMovieServiceWCF/GetAllMoviesByIdResponse")]
        System.Threading.Tasks.Task<MovieNetWpfApp.MovieServiceRef.Movie[]> GetAllMoviesByIdAsync(int idSet);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMovieServiceWCFChannel : MovieNetWpfApp.MovieServiceRef.IMovieServiceWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MovieServiceWCFClient : System.ServiceModel.ClientBase<MovieNetWpfApp.MovieServiceRef.IMovieServiceWCF>, MovieNetWpfApp.MovieServiceRef.IMovieServiceWCF {
        
        public MovieServiceWCFClient() {
        }
        
        public MovieServiceWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MovieServiceWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieServiceWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieServiceWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MovieNetWpfApp.MovieServiceRef.Movie[] GetAllMovies() {
            return base.Channel.GetAllMovies();
        }
        
        public System.Threading.Tasks.Task<MovieNetWpfApp.MovieServiceRef.Movie[]> GetAllMoviesAsync() {
            return base.Channel.GetAllMoviesAsync();
        }
        
        public object GetMovie(int idSet) {
            return base.Channel.GetMovie(idSet);
        }
        
        public System.Threading.Tasks.Task<object> GetMovieAsync(int idSet) {
            return base.Channel.GetMovieAsync(idSet);
        }
        
        public bool CreateMovie(string _title, string _duration, string _genre, string _summary, string image, int _UserSet_id) {
            return base.Channel.CreateMovie(_title, _duration, _genre, _summary, image, _UserSet_id);
        }
        
        public System.Threading.Tasks.Task<bool> CreateMovieAsync(string _title, string _duration, string _genre, string _summary, string image, int _UserSet_id) {
            return base.Channel.CreateMovieAsync(_title, _duration, _genre, _summary, image, _UserSet_id);
        }
        
        public bool DeleteMovie(int idSet) {
            return base.Channel.DeleteMovie(idSet);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMovieAsync(int idSet) {
            return base.Channel.DeleteMovieAsync(idSet);
        }
        
        public bool UpdateUser(int _Id, string _title, string _duration, string _genre, string _summary, string _image) {
            return base.Channel.UpdateUser(_Id, _title, _duration, _genre, _summary, _image);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(int _Id, string _title, string _duration, string _genre, string _summary, string _image) {
            return base.Channel.UpdateUserAsync(_Id, _title, _duration, _genre, _summary, _image);
        }
        
        public MovieNetWpfApp.MovieServiceRef.Movie[] FindMovieByTitle(string titleSet) {
            return base.Channel.FindMovieByTitle(titleSet);
        }
        
        public System.Threading.Tasks.Task<MovieNetWpfApp.MovieServiceRef.Movie[]> FindMovieByTitleAsync(string titleSet) {
            return base.Channel.FindMovieByTitleAsync(titleSet);
        }
        
        public object FindMovieByGenre(string genreSet) {
            return base.Channel.FindMovieByGenre(genreSet);
        }
        
        public System.Threading.Tasks.Task<object> FindMovieByGenreAsync(string genreSet) {
            return base.Channel.FindMovieByGenreAsync(genreSet);
        }
        
        public MovieNetWpfApp.MovieServiceRef.Movie[] FindMoviesOfUser(int idUser) {
            return base.Channel.FindMoviesOfUser(idUser);
        }
        
        public System.Threading.Tasks.Task<MovieNetWpfApp.MovieServiceRef.Movie[]> FindMoviesOfUserAsync(int idUser) {
            return base.Channel.FindMoviesOfUserAsync(idUser);
        }
        
        public MovieNetWpfApp.MovieServiceRef.Movie[] GetAllMoviesById(int idSet) {
            return base.Channel.GetAllMoviesById(idSet);
        }
        
        public System.Threading.Tasks.Task<MovieNetWpfApp.MovieServiceRef.Movie[]> GetAllMoviesByIdAsync(int idSet) {
            return base.Channel.GetAllMoviesByIdAsync(idSet);
        }
    }
}
