//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MovieNetWpfApp.NoteServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Note", Namespace="http://schemas.datacontract.org/2004/07/MovieNetWcfService")]
    [System.SerializableAttribute()]
    public partial class Note : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentGetSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdGetSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Movie_idGetSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreGetSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int User_idGetSetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommentGetSet {
            get {
                return this.CommentGetSetField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentGetSetField, value) != true)) {
                    this.CommentGetSetField = value;
                    this.RaisePropertyChanged("CommentGetSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdGetSet {
            get {
                return this.IdGetSetField;
            }
            set {
                if ((this.IdGetSetField.Equals(value) != true)) {
                    this.IdGetSetField = value;
                    this.RaisePropertyChanged("IdGetSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Movie_idGetSet {
            get {
                return this.Movie_idGetSetField;
            }
            set {
                if ((this.Movie_idGetSetField.Equals(value) != true)) {
                    this.Movie_idGetSetField = value;
                    this.RaisePropertyChanged("Movie_idGetSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScoreGetSet {
            get {
                return this.ScoreGetSetField;
            }
            set {
                if ((this.ScoreGetSetField.Equals(value) != true)) {
                    this.ScoreGetSetField = value;
                    this.RaisePropertyChanged("ScoreGetSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int User_idGetSet {
            get {
                return this.User_idGetSetField;
            }
            set {
                if ((this.User_idGetSetField.Equals(value) != true)) {
                    this.User_idGetSetField = value;
                    this.RaisePropertyChanged("User_idGetSet");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NoteServiceRef.INoteServiceWCF")]
    public interface INoteServiceWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/GetAllNote", ReplyAction="http://tempuri.org/INoteServiceWCF/GetAllNoteResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MovieNetWpfApp.NoteServiceRef.Note))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MovieNetWpfApp.NoteServiceRef.Note[]))]
        object GetAllNote();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/GetAllNote", ReplyAction="http://tempuri.org/INoteServiceWCF/GetAllNoteResponse")]
        System.Threading.Tasks.Task<object> GetAllNoteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/GetNote", ReplyAction="http://tempuri.org/INoteServiceWCF/GetNoteResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MovieNetWpfApp.NoteServiceRef.Note))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MovieNetWpfApp.NoteServiceRef.Note[]))]
        object GetNote(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/GetNote", ReplyAction="http://tempuri.org/INoteServiceWCF/GetNoteResponse")]
        System.Threading.Tasks.Task<object> GetNoteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/CreateNote", ReplyAction="http://tempuri.org/INoteServiceWCF/CreateNoteResponse")]
        bool CreateNote(int _note, string _comment, int _idUser, int _idMovie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/CreateNote", ReplyAction="http://tempuri.org/INoteServiceWCF/CreateNoteResponse")]
        System.Threading.Tasks.Task<bool> CreateNoteAsync(int _note, string _comment, int _idUser, int _idMovie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/UpdateNote", ReplyAction="http://tempuri.org/INoteServiceWCF/UpdateNoteResponse")]
        bool UpdateNote(MovieNetWpfApp.NoteServiceRef.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/UpdateNote", ReplyAction="http://tempuri.org/INoteServiceWCF/UpdateNoteResponse")]
        System.Threading.Tasks.Task<bool> UpdateNoteAsync(MovieNetWpfApp.NoteServiceRef.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/DeleteNote", ReplyAction="http://tempuri.org/INoteServiceWCF/DeleteNoteResponse")]
        bool DeleteNote(MovieNetWpfApp.NoteServiceRef.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/DeleteNote", ReplyAction="http://tempuri.org/INoteServiceWCF/DeleteNoteResponse")]
        System.Threading.Tasks.Task<bool> DeleteNoteAsync(MovieNetWpfApp.NoteServiceRef.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/FindNotesOfMovie", ReplyAction="http://tempuri.org/INoteServiceWCF/FindNotesOfMovieResponse")]
        MovieNetWpfApp.NoteServiceRef.Note[] FindNotesOfMovie(int idMovie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/FindNotesOfMovie", ReplyAction="http://tempuri.org/INoteServiceWCF/FindNotesOfMovieResponse")]
        System.Threading.Tasks.Task<MovieNetWpfApp.NoteServiceRef.Note[]> FindNotesOfMovieAsync(int idMovie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/FindNotesOfUser", ReplyAction="http://tempuri.org/INoteServiceWCF/FindNotesOfUserResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MovieNetWpfApp.NoteServiceRef.Note))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MovieNetWpfApp.NoteServiceRef.Note[]))]
        object FindNotesOfUser(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceWCF/FindNotesOfUser", ReplyAction="http://tempuri.org/INoteServiceWCF/FindNotesOfUserResponse")]
        System.Threading.Tasks.Task<object> FindNotesOfUserAsync(int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INoteServiceWCFChannel : MovieNetWpfApp.NoteServiceRef.INoteServiceWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NoteServiceWCFClient : System.ServiceModel.ClientBase<MovieNetWpfApp.NoteServiceRef.INoteServiceWCF>, MovieNetWpfApp.NoteServiceRef.INoteServiceWCF {
        
        public NoteServiceWCFClient() {
        }
        
        public NoteServiceWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NoteServiceWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteServiceWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteServiceWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public object GetAllNote() {
            return base.Channel.GetAllNote();
        }
        
        public System.Threading.Tasks.Task<object> GetAllNoteAsync() {
            return base.Channel.GetAllNoteAsync();
        }
        
        public object GetNote(int id) {
            return base.Channel.GetNote(id);
        }
        
        public System.Threading.Tasks.Task<object> GetNoteAsync(int id) {
            return base.Channel.GetNoteAsync(id);
        }
        
        public bool CreateNote(int _note, string _comment, int _idUser, int _idMovie) {
            return base.Channel.CreateNote(_note, _comment, _idUser, _idMovie);
        }
        
        public System.Threading.Tasks.Task<bool> CreateNoteAsync(int _note, string _comment, int _idUser, int _idMovie) {
            return base.Channel.CreateNoteAsync(_note, _comment, _idUser, _idMovie);
        }
        
        public bool UpdateNote(MovieNetWpfApp.NoteServiceRef.Note note) {
            return base.Channel.UpdateNote(note);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateNoteAsync(MovieNetWpfApp.NoteServiceRef.Note note) {
            return base.Channel.UpdateNoteAsync(note);
        }
        
        public bool DeleteNote(MovieNetWpfApp.NoteServiceRef.Note note) {
            return base.Channel.DeleteNote(note);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteNoteAsync(MovieNetWpfApp.NoteServiceRef.Note note) {
            return base.Channel.DeleteNoteAsync(note);
        }
        
        public MovieNetWpfApp.NoteServiceRef.Note[] FindNotesOfMovie(int idMovie) {
            return base.Channel.FindNotesOfMovie(idMovie);
        }
        
        public System.Threading.Tasks.Task<MovieNetWpfApp.NoteServiceRef.Note[]> FindNotesOfMovieAsync(int idMovie) {
            return base.Channel.FindNotesOfMovieAsync(idMovie);
        }
        
        public object FindNotesOfUser(int idUser) {
            return base.Channel.FindNotesOfUser(idUser);
        }
        
        public System.Threading.Tasks.Task<object> FindNotesOfUserAsync(int idUser) {
            return base.Channel.FindNotesOfUserAsync(idUser);
        }
    }
}
